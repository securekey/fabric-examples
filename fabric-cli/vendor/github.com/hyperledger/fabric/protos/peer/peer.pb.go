// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/peer.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *PeerID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PeerEndpoint struct {
	Id      *PeerID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *PeerEndpoint) GetId() *PeerID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PeerEndpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Endorser service

type EndorserClient interface {
	ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponse, error)
}

type endorserClient struct {
	cc *grpc.ClientConn
}

func NewEndorserClient(cc *grpc.ClientConn) EndorserClient {
	return &endorserClient{cc}
}

func (c *endorserClient) ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponse, error) {
	out := new(ProposalResponse)
	err := grpc.Invoke(ctx, "/protos.Endorser/ProcessProposal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Endorser service

type EndorserServer interface {
	ProcessProposal(context.Context, *SignedProposal) (*ProposalResponse, error)
}

func RegisterEndorserServer(s *grpc.Server, srv EndorserServer) {
	s.RegisterService(&_Endorser_serviceDesc, srv)
}

func _Endorser_ProcessProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndorserServer).ProcessProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Endorser/ProcessProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndorserServer).ProcessProposal(ctx, req.(*SignedProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Endorser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Endorser",
	HandlerType: (*EndorserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessProposal",
			Handler:    _Endorser_ProcessProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/peer.proto",
}

func init() { proto.RegisterFile("peer/peer.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xdd, 0x22, 0xab, 0x8e, 0xe2, 0x42, 0x04, 0x29, 0x65, 0x11, 0xe9, 0x49, 0x2f, 0x29,
	0xac, 0xdf, 0x40, 0x2c, 0xe8, 0xc9, 0x5a, 0x6f, 0x5e, 0xa4, 0x6d, 0xc6, 0x6e, 0x60, 0x37, 0x13,
	0x66, 0xea, 0xc1, 0x6f, 0x2f, 0x4d, 0x5a, 0x71, 0x2f, 0xf9, 0xf3, 0xde, 0x6f, 0x5e, 0x26, 0x03,
	0x2b, 0x8f, 0xc8, 0xc5, 0xb8, 0x68, 0xcf, 0x34, 0x90, 0x5a, 0x86, 0x4d, 0xb2, 0xab, 0x68, 0x30,
	0x79, 0x92, 0x66, 0x17, 0xcd, 0x6c, 0x7d, 0x20, 0x7e, 0x32, 0x8a, 0x27, 0x27, 0x18, 0xdd, 0x7c,
	0x0d, 0xcb, 0x0a, 0x91, 0x5f, 0x9e, 0x94, 0x82, 0x63, 0xd7, 0xec, 0x31, 0x5d, 0xdc, 0x2e, 0xee,
	0xce, 0xea, 0x70, 0xce, 0x9f, 0xe1, 0x62, 0x74, 0x4b, 0x67, 0x3c, 0x59, 0x37, 0xa8, 0x1b, 0x48,
	0xac, 0x09, 0xc4, 0xf9, 0xe6, 0x32, 0x26, 0x88, 0x8e, 0xf5, 0x75, 0x62, 0x8d, 0x4a, 0xe1, 0xa4,
	0x31, 0x86, 0x51, 0x24, 0x4d, 0x42, 0xcc, 0x7c, 0xdd, 0xbc, 0xc1, 0x69, 0xe9, 0x0c, 0xb1, 0x20,
	0xab, 0x12, 0x56, 0x15, 0x53, 0x87, 0x22, 0xd5, 0xd4, 0x95, 0xba, 0x9e, 0xc3, 0xde, 0x6d, 0xef,
	0xd0, 0xcc, 0x7a, 0x96, 0xfe, 0x3d, 0x32, 0x29, 0xf5, 0xd4, 0x7e, 0x7e, 0xf4, 0xf8, 0x0a, 0x39,
	0x71, 0xaf, 0xb7, 0x3f, 0x1e, 0x79, 0x87, 0xa6, 0x47, 0xd6, 0x5f, 0x4d, 0xcb, 0xb6, 0x9b, 0x6b,
	0xc6, 0x8f, 0x7f, 0xdc, 0xf7, 0x76, 0xd8, 0x7e, 0xb7, 0xba, 0xa3, 0x7d, 0xf1, 0x0f, 0x2d, 0x22,
	0x5a, 0x44, 0x34, 0x0c, 0xb3, 0x8d, 0x63, 0x7c, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xef, 0x32,
	0xf2, 0x1f, 0x60, 0x01, 0x00, 0x00,
}
